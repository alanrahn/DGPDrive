//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace DGPDrive.DGPSOAPSvc {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DGPSOAPSvcSoap", Namespace="http://DGPDrive.net/")]
    public partial class DGPSOAPSvc : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetPubKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SvcCntrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback OneWayCntrlOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DGPSOAPSvc() {
            this.Url = global::DGPDrive.Properties.Settings.Default.DGPDrive_DGPSOAPSvc_DGPSOAPSvc;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetPubKeyCompletedEventHandler GetPubKeyCompleted;
        
        /// <remarks/>
        public event SvcCntrlCompletedEventHandler SvcCntrlCompleted;
        
        /// <remarks/>
        public event OneWayCntrlCompletedEventHandler OneWayCntrlCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://DGPDrive.net/GetPubKey", RequestNamespace="http://DGPDrive.net/", ResponseNamespace="http://DGPDrive.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPubKey() {
            object[] results = this.Invoke("GetPubKey", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPubKeyAsync() {
            this.GetPubKeyAsync(null);
        }
        
        /// <remarks/>
        public void GetPubKeyAsync(object userState) {
            if ((this.GetPubKeyOperationCompleted == null)) {
                this.GetPubKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPubKeyOperationCompleted);
            }
            this.InvokeAsync("GetPubKey", new object[0], this.GetPubKeyOperationCompleted, userState);
        }
        
        private void OnGetPubKeyOperationCompleted(object arg) {
            if ((this.GetPubKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPubKeyCompleted(this, new GetPubKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://DGPDrive.net/SvcCntrl", RequestNamespace="http://DGPDrive.net/", ResponseNamespace="http://DGPDrive.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SvcCntrl(string encSymmKey, string ReqMsg) {
            object[] results = this.Invoke("SvcCntrl", new object[] {
                        encSymmKey,
                        ReqMsg});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SvcCntrlAsync(string encSymmKey, string ReqMsg) {
            this.SvcCntrlAsync(encSymmKey, ReqMsg, null);
        }
        
        /// <remarks/>
        public void SvcCntrlAsync(string encSymmKey, string ReqMsg, object userState) {
            if ((this.SvcCntrlOperationCompleted == null)) {
                this.SvcCntrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSvcCntrlOperationCompleted);
            }
            this.InvokeAsync("SvcCntrl", new object[] {
                        encSymmKey,
                        ReqMsg}, this.SvcCntrlOperationCompleted, userState);
        }
        
        private void OnSvcCntrlOperationCompleted(object arg) {
            if ((this.SvcCntrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SvcCntrlCompleted(this, new SvcCntrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://DGPDrive.net/OneWayCntrl", RequestNamespace="http://DGPDrive.net/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void OneWayCntrl(string encSymmKey, string ReqMsg) {
            this.Invoke("OneWayCntrl", new object[] {
                        encSymmKey,
                        ReqMsg});
        }
        
        /// <remarks/>
        public void OneWayCntrlAsync(string encSymmKey, string ReqMsg) {
            this.OneWayCntrlAsync(encSymmKey, ReqMsg, null);
        }
        
        /// <remarks/>
        public void OneWayCntrlAsync(string encSymmKey, string ReqMsg, object userState) {
            if ((this.OneWayCntrlOperationCompleted == null)) {
                this.OneWayCntrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOneWayCntrlOperationCompleted);
            }
            this.InvokeAsync("OneWayCntrl", new object[] {
                        encSymmKey,
                        ReqMsg}, this.OneWayCntrlOperationCompleted, userState);
        }
        
        private void OnOneWayCntrlOperationCompleted(object arg) {
            if ((this.OneWayCntrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OneWayCntrlCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetPubKeyCompletedEventHandler(object sender, GetPubKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPubKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPubKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SvcCntrlCompletedEventHandler(object sender, SvcCntrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SvcCntrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SvcCntrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void OneWayCntrlCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591